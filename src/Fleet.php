<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace emdash\SpaceTraders;

class Fleet 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create Chart
     * 
     * Command a ship to chart the current waypoint.
     * 
     * Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
     * 
     * Charting a location will record your agent as the one who created the chart.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\CreateChartRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\CreateChartSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\CreateChartResponse
     */
	public function createChart(
        \emdash\SpaceTraders\Models\Operations\CreateChartRequest $request,
        \emdash\SpaceTraders\Models\Operations\CreateChartSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\CreateChartResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/chart', \emdash\SpaceTraders\Models\Operations\CreateChartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\CreateChartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createChart201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\CreateChart201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan Ships
     * 
     * Activate your ship's sensor arrays to scan for ship information.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipShipScanRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipShipScanSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\CreateShipShipScanResponse
     */
	public function createShipShipScan(
        \emdash\SpaceTraders\Models\Operations\CreateShipShipScanRequest $request,
        \emdash\SpaceTraders\Models\Operations\CreateShipShipScanSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\CreateShipShipScanResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/scan/ships', \emdash\SpaceTraders\Models\Operations\CreateShipShipScanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\CreateShipShipScanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShipShipScan201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\CreateShipShipScan201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan Systems
     * 
     * Activate your ship's sensor arrays to scan for system information.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanResponse
     */
	public function createShipSystemScan(
        \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanRequest $request,
        \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/scan/systems', \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\CreateShipSystemScanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShipSystemScan201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\CreateShipSystemScan201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan Waypoints
     * 
     * Activate your ship's sensor arrays to scan for waypoint information.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanResponse
     */
	public function createShipWaypointScan(
        \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanRequest $request,
        \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/scan/waypoints', \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\CreateShipWaypointScanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShipWaypointScan201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\CreateShipWaypointScan201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Survey
     * 
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
     * 
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\CreateSurveyRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\CreateSurveySecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\CreateSurveyResponse
     */
	public function createSurvey(
        \emdash\SpaceTraders\Models\Operations\CreateSurveyRequest $request,
        \emdash\SpaceTraders\Models\Operations\CreateSurveySecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\CreateSurveyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/survey', \emdash\SpaceTraders\Models\Operations\CreateSurveyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\CreateSurveyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSurvey201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\CreateSurvey201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dock Ship
     * 
     * Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\DockShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\DockShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\DockShipResponse
     */
	public function dockShip(
        \emdash\SpaceTraders\Models\Operations\DockShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\DockShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\DockShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/dock', \emdash\SpaceTraders\Models\Operations\DockShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\DockShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dockShip200Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\DockShipDockShip200Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Extract Resources
     * 
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\ExtractResourcesRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\ExtractResourcesSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\ExtractResourcesResponse
     */
	public function extractResources(
        \emdash\SpaceTraders\Models\Operations\ExtractResourcesRequest $request,
        \emdash\SpaceTraders\Models\Operations\ExtractResourcesSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\ExtractResourcesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/extract', \emdash\SpaceTraders\Models\Operations\ExtractResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\ExtractResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->extractResources201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\ExtractResources201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Ship
     * 
     * Retrieve the details of your ship.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetMyShipResponse
     */
	public function getMyShip(
        \emdash\SpaceTraders\Models\Operations\GetMyShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetMyShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetMyShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}', \emdash\SpaceTraders\Models\Operations\GetMyShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetMyShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMyShip200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetMyShip200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Ship Cargo
     * 
     * Retrieve the cargo of your ship.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipCargoRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipCargoSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetMyShipCargoResponse
     */
	public function getMyShipCargo(
        \emdash\SpaceTraders\Models\Operations\GetMyShipCargoRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetMyShipCargoSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetMyShipCargoResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/cargo', \emdash\SpaceTraders\Models\Operations\GetMyShipCargoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetMyShipCargoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMyShipCargo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetMyShipCargo200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Ships
     * 
     * Retrieve all of your ships.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipsRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetMyShipsSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetMyShipsResponse
     */
	public function getMyShips(
        \emdash\SpaceTraders\Models\Operations\GetMyShipsRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetMyShipsSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetMyShipsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\emdash\SpaceTraders\Models\Operations\GetMyShipsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetMyShipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMyShips200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetMyShips200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Ship Cooldown
     * 
     * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
     * 
     * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
     * 
     * Response returns a 204 status code (no-content) when the ship has no cooldown.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetShipCooldownRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetShipCooldownSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetShipCooldownResponse
     */
	public function getShipCooldown(
        \emdash\SpaceTraders\Models\Operations\GetShipCooldownRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetShipCooldownSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetShipCooldownResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/cooldown', \emdash\SpaceTraders\Models\Operations\GetShipCooldownRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetShipCooldownResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShipCooldown200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetShipCooldown200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get Ship Nav
     * 
     * Get the current nav status of a ship.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetShipNavRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetShipNavSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetShipNavResponse
     */
	public function getShipNav(
        \emdash\SpaceTraders\Models\Operations\GetShipNavRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetShipNavSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetShipNavResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/nav', \emdash\SpaceTraders\Models\Operations\GetShipNavRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetShipNavResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShipNav200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetShipNav200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Jettison Cargo
     * 
     * Jettison cargo from your ship's cargo hold.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\JettisonRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\JettisonSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\JettisonResponse
     */
	public function jettison(
        \emdash\SpaceTraders\Models\Operations\JettisonRequest $request,
        \emdash\SpaceTraders\Models\Operations\JettisonSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\JettisonResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/jettison', \emdash\SpaceTraders\Models\Operations\JettisonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\JettisonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jettison200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\Jettison200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Jump Ship
     * 
     * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
     * 
     * @param \emdash\SpaceTraders\Models\Operations\JumpShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\JumpShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\JumpShipResponse
     */
	public function jumpShip(
        \emdash\SpaceTraders\Models\Operations\JumpShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\JumpShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\JumpShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/jump', \emdash\SpaceTraders\Models\Operations\JumpShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\JumpShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jumpShip200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\JumpShip200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Navigate Ship
     * 
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * 
     * To travel between systems, see the ship's warp or jump actions.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\NavigateShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\NavigateShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\NavigateShipResponse
     */
	public function navigateShip(
        \emdash\SpaceTraders\Models\Operations\NavigateShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\NavigateShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\NavigateShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/navigate', \emdash\SpaceTraders\Models\Operations\NavigateShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\NavigateShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->navigateShip200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\NavigateShip200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Negotiate Contract
     * 
     * @param \emdash\SpaceTraders\Models\Operations\NegotiateContractRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\NegotiateContractSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\NegotiateContractResponse
     */
	public function negotiateContract(
        \emdash\SpaceTraders\Models\Operations\NegotiateContractRequest $request,
        \emdash\SpaceTraders\Models\Operations\NegotiateContractSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\NegotiateContractResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/negotiate/contract', \emdash\SpaceTraders\Models\Operations\NegotiateContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\NegotiateContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->negotiateContract200Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\NegotiateContractNegotiateContract200Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Orbit Ship
     * 
     * Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\OrbitShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\OrbitShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\OrbitShipResponse
     */
	public function orbitShip(
        \emdash\SpaceTraders\Models\Operations\OrbitShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\OrbitShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\OrbitShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/orbit', \emdash\SpaceTraders\Models\Operations\OrbitShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\OrbitShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orbitShip200Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\OrbitShipOrbitShip200Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patch Ship Nav
     * 
     * Update the nav data of a ship, such as the flight mode.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\PatchShipNavRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\PatchShipNavSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\PatchShipNavResponse
     */
	public function patchShipNav(
        \emdash\SpaceTraders\Models\Operations\PatchShipNavRequest $request,
        \emdash\SpaceTraders\Models\Operations\PatchShipNavSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\PatchShipNavResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/nav', \emdash\SpaceTraders\Models\Operations\PatchShipNavRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\PatchShipNavResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchShipNav200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\PatchShipNav200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase Cargo
     * 
     * Purchase cargo.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\PurchaseCargoRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\PurchaseCargoSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\PurchaseCargoResponse
     */
	public function purchaseCargo(
        \emdash\SpaceTraders\Models\Operations\PurchaseCargoRequest $request,
        \emdash\SpaceTraders\Models\Operations\PurchaseCargoSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\PurchaseCargoResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/purchase', \emdash\SpaceTraders\Models\Operations\PurchaseCargoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\PurchaseCargoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->purchaseCargo201Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\PurchaseCargoPurchaseCargo201Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase Ship
     * 
     * Purchase a ship
     * 
     * @param \emdash\SpaceTraders\Models\Operations\PurchaseShipRequestBody $request
     * @param \emdash\SpaceTraders\Models\Operations\PurchaseShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\PurchaseShipResponse
     */
	public function purchaseShip(
        \emdash\SpaceTraders\Models\Operations\PurchaseShipRequestBody $request,
        \emdash\SpaceTraders\Models\Operations\PurchaseShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\PurchaseShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\PurchaseShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->purchaseShip201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\PurchaseShip201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refuel Ship
     * 
     * Refuel your ship from the local market.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\RefuelShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\RefuelShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\RefuelShipResponse
     */
	public function refuelShip(
        \emdash\SpaceTraders\Models\Operations\RefuelShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\RefuelShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\RefuelShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/refuel', \emdash\SpaceTraders\Models\Operations\RefuelShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\RefuelShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->refuelShip200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\RefuelShip200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sell Cargo
     * 
     * Sell cargo.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\SellCargoRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\SellCargoSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\SellCargoResponse
     */
	public function sellCargo(
        \emdash\SpaceTraders\Models\Operations\SellCargoRequest $request,
        \emdash\SpaceTraders\Models\Operations\SellCargoSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\SellCargoResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/sell', \emdash\SpaceTraders\Models\Operations\SellCargoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\SellCargoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sellCargo201Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\SellCargoSellCargo201Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ship Refine
     * 
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\ShipRefineRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\ShipRefineSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\ShipRefineResponse
     */
	public function shipRefine(
        \emdash\SpaceTraders\Models\Operations\ShipRefineRequest $request,
        \emdash\SpaceTraders\Models\Operations\ShipRefineSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\ShipRefineResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/refine', \emdash\SpaceTraders\Models\Operations\ShipRefineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\ShipRefineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shipRefine200Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\ShipRefineShipRefine200Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transfer Cargo
     * 
     * Transfer cargo between ships.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\TransferCargoRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\TransferCargoSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\TransferCargoResponse
     */
	public function transferCargo(
        \emdash\SpaceTraders\Models\Operations\TransferCargoRequest $request,
        \emdash\SpaceTraders\Models\Operations\TransferCargoSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\TransferCargoResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/transfer', \emdash\SpaceTraders\Models\Operations\TransferCargoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\TransferCargoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferCargo200Response = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\TransferCargoTransferCargo200Response', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Warp Ship
     * 
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\WarpShipRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\WarpShipSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\WarpShipResponse
     */
	public function warpShip(
        \emdash\SpaceTraders\Models\Operations\WarpShipRequest $request,
        \emdash\SpaceTraders\Models\Operations\WarpShipSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\WarpShipResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/ships/{shipSymbol}/warp', \emdash\SpaceTraders\Models\Operations\WarpShipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\WarpShipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->warpShip200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\WarpShip200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}