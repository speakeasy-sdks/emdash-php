<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace emdash\SpaceTraders;

class Systems 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Get Jump Gate
     * 
     * Get jump gate details for a waypoint.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetJumpGateRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetJumpGateResponse
     */
	public function getJumpGate(
        \emdash\SpaceTraders\Models\Operations\GetJumpGateRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetJumpGateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate', \emdash\SpaceTraders\Models\Operations\GetJumpGateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetJumpGateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getJumpGate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetJumpGate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Market
     * 
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetMarketRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetMarketResponse
     */
	public function getMarket(
        \emdash\SpaceTraders\Models\Operations\GetMarketRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetMarketResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market', \emdash\SpaceTraders\Models\Operations\GetMarketRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetMarketResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMarket200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetMarket200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Shipyard
     * 
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetShipyardRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetShipyardResponse
     */
	public function getShipyard(
        \emdash\SpaceTraders\Models\Operations\GetShipyardRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetShipyardResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard', \emdash\SpaceTraders\Models\Operations\GetShipyardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetShipyardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShipyard200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetShipyard200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get System
     * 
     * Get the details of a system.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetSystemRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetSystemResponse
     */
	public function getSystem(
        \emdash\SpaceTraders\Models\Operations\GetSystemRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetSystemResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}', \emdash\SpaceTraders\Models\Operations\GetSystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSystem200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetSystem200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Waypoints
     * 
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsResponse
     */
	public function getSystemWaypoints(
        \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}/waypoints', \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\emdash\SpaceTraders\Models\Operations\GetSystemWaypointsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetSystemWaypointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSystemWaypoints200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetSystemWaypoints200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Systems
     * 
     * Return a list of all systems.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetSystemsRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetSystemsResponse
     */
	public function getSystems(
        \emdash\SpaceTraders\Models\Operations\GetSystemsRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetSystemsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\emdash\SpaceTraders\Models\Operations\GetSystemsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSystems200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetSystems200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Waypoint
     * 
     * View the details of a waypoint.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetWaypointRequest $request
     * @return \emdash\SpaceTraders\Models\Operations\GetWaypointResponse
     */
	public function getWaypoint(
        \emdash\SpaceTraders\Models\Operations\GetWaypointRequest $request,
    ): \emdash\SpaceTraders\Models\Operations\GetWaypointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/systems/{systemSymbol}/waypoints/{waypointSymbol}', \emdash\SpaceTraders\Models\Operations\GetWaypointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetWaypointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWaypoint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetWaypoint200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}