<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace emdash\SpaceTraders;

class Contracts 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Accept Contract
     * 
     * Accept a contract.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\AcceptContractRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\AcceptContractSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\AcceptContractResponse
     */
	public function acceptContract(
        \emdash\SpaceTraders\Models\Operations\AcceptContractRequest $request,
        \emdash\SpaceTraders\Models\Operations\AcceptContractSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\AcceptContractResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/contracts/{contractId}/accept', \emdash\SpaceTraders\Models\Operations\AcceptContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\AcceptContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->acceptContract200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\AcceptContract200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deliver Contract
     * 
     * Deliver cargo on a given contract.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\DeliverContractRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\DeliverContractSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\DeliverContractResponse
     */
	public function deliverContract(
        \emdash\SpaceTraders\Models\Operations\DeliverContractRequest $request,
        \emdash\SpaceTraders\Models\Operations\DeliverContractSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\DeliverContractResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/contracts/{contractId}/deliver', \emdash\SpaceTraders\Models\Operations\DeliverContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\DeliverContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deliverContract200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\DeliverContract200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fulfill Contract
     * 
     * Fulfill a contract
     * 
     * @param \emdash\SpaceTraders\Models\Operations\FulfillContractRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\FulfillContractSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\FulfillContractResponse
     */
	public function fulfillContract(
        \emdash\SpaceTraders\Models\Operations\FulfillContractRequest $request,
        \emdash\SpaceTraders\Models\Operations\FulfillContractSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\FulfillContractResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/contracts/{contractId}/fulfill', \emdash\SpaceTraders\Models\Operations\FulfillContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\FulfillContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fulfillContract200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\FulfillContract200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Contract
     * 
     * Get the details of a contract by ID.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetContractRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetContractSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetContractResponse
     */
	public function getContract(
        \emdash\SpaceTraders\Models\Operations\GetContractRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetContractSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetContractResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/contracts/{contractId}', \emdash\SpaceTraders\Models\Operations\GetContractRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetContractResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContract200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetContract200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Contracts
     * 
     * List all of your contracts.
     * 
     * @param \emdash\SpaceTraders\Models\Operations\GetContractsRequest $request
     * @param \emdash\SpaceTraders\Models\Operations\GetContractsSecurity $security
     * @return \emdash\SpaceTraders\Models\Operations\GetContractsResponse
     */
	public function getContracts(
        \emdash\SpaceTraders\Models\Operations\GetContractsRequest $request,
        \emdash\SpaceTraders\Models\Operations\GetContractsSecurity $security,
    ): \emdash\SpaceTraders\Models\Operations\GetContractsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/my/contracts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\emdash\SpaceTraders\Models\Operations\GetContractsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \emdash\SpaceTraders\Models\Operations\GetContractsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getContracts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'emdash\SpaceTraders\Models\Operations\GetContracts200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}